{"version":3,"sources":["webpack:///./src/players/DailyMotion.js"],"names":["DailyMotion","callPlayer","duration","getDuration","props","onDuration","container","this","onMount","url","controls","config","onError","playing","id","match","MATCH_URL_DAILYMOTION","player","load","start","parseStartTime","autoplay","getSDK","DM","then","Player","width","height","video","params","mute","muted","origin","window","location","events","apiready","onReady","seeked","onSeek","currentTime","video_end","onEnded","durationchange","onDurationChange","pause","onPause","onPlay","waiting","onBuffer","error","event","seconds","fraction","bufferedTime","style","display","ref","Component","canPlay","dailymotion"],"mappings":"klGAKA,IAIqBA,E,uaAINC,K,2BA6CM,WACjB,IAAMC,EAAW,EAAKC,cACtB,EAAKC,MAAMC,WAAWH,M,eAuBjB,WACL,EAAKD,WAAW,YAAY,M,iBAGrB,WACP,EAAKA,WAAW,YAAY,M,cAexB,SAAAK,GACJ,EAAKA,UAAYA,K,2DAxFjBC,KAAKH,MAAMI,SAAWD,KAAKH,MAAMI,QAAQD,Q,2BAGrCE,GAAK,aACsCF,KAAKH,MAA5CM,EADC,EACDA,SAAUC,EADT,EACSA,OAAQC,EADjB,EACiBA,QAASC,EAD1B,EAC0BA,QAC1BC,EAFA,EAEML,EAAIM,MAAMC,KAFhB,MAGLT,KAAKU,OACPV,KAAKU,OAAOC,KAAKJ,EAAI,CACnBK,MAAOC,YAAeX,GACtBY,SAAUR,IAIdS,YAxBY,+BACG,KACM,eAsByB,SAAAC,GAAE,OAAIA,EAAGN,UAAQO,MAAK,SAAAD,GAClE,GAAK,EAAKjB,UAAV,CACA,IAAMmB,EAASF,EAAGN,OAClB,EAAKA,OAAS,IAAIQ,EAAO,EAAKnB,UAAW,CACvCoB,MAAO,OACPC,OAAQ,OACRC,MAAOd,EACPe,OAAQ,EAAF,CACJnB,SAAUA,EACVW,SAAU,EAAKjB,MAAMS,QACrBiB,KAAM,EAAK1B,MAAM2B,MACjBZ,MAAOC,YAAeX,GACtBuB,OAAQC,OAAOC,SAASF,QACrBrB,EAAOkB,QAEZM,OAAQ,CACNC,SAAU,EAAKhC,MAAMiC,QACrBC,OAAQ,kBAAM,EAAKlC,MAAMmC,OAAO,EAAKtB,OAAOuB,cAC5CC,UAAW,EAAKrC,MAAMsC,QACtBC,eAAgB,EAAKC,iBACrBC,MAAO,EAAKzC,MAAM0C,QAClBjC,QAAS,EAAKT,MAAM2C,OACpBC,QAAS,EAAK5C,MAAM6C,SACpBC,MAAO,SAAAC,GAAK,OAAIvC,EAAQuC,UAG3BvC,K,6BASHL,KAAKN,WAAW,U,8BAIhBM,KAAKN,WAAW,W,6DAOVmD,GACN7C,KAAKN,WAAW,OAAQmD,K,gCAGfC,GACT9C,KAAKN,WAAW,YAAaoD,K,oCAY7B,OAAO9C,KAAKU,OAAOf,UAAY,O,uCAI/B,OAAOK,KAAKU,OAAOuB,c,yCAInB,OAAOjC,KAAKU,OAAOqC,e,+BAOX,IAEFC,EAAQ,CACZ7B,MAAO,OACPC,OAAQ,OACR6B,QAJkBjD,KAAKH,MAAjBoD,SAMR,OACE,yBAAKD,MAAOA,GACV,yBAAKE,IAAKlD,KAAKkD,Y,8BA3GkBC,a,EAApB1D,E,cACE,e,EADFA,E,UAEF2D,IAAQC,a,EAFN5D,E,eAGE","file":"1.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime } from '../utils'\nimport { canPlay, MATCH_URL_DAILYMOTION } from '../patterns'\n\nconst SDK_URL = 'https://api.dmcdn.net/all.js'\nconst SDK_GLOBAL = 'DM'\nconst SDK_GLOBAL_READY = 'dmAsyncInit'\n\nexport default class DailyMotion extends Component {\n  static displayName = 'DailyMotion'\n  static canPlay = canPlay.dailymotion\n  static loopOnEnded = true\n  callPlayer = callPlayer\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url) {\n    const { controls, config, onError, playing } = this.props\n    const [, id] = url.match(MATCH_URL_DAILYMOTION)\n    if (this.player) {\n      this.player.load(id, {\n        start: parseStartTime(url),\n        autoplay: playing\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, DM => DM.player).then(DM => {\n      if (!this.container) return\n      const Player = DM.player\n      this.player = new Player(this.container, {\n        width: '100%',\n        height: '100%',\n        video: id,\n        params: {\n          controls: controls,\n          autoplay: this.props.playing,\n          mute: this.props.muted,\n          start: parseStartTime(url),\n          origin: window.location.origin,\n          ...config.params\n        },\n        events: {\n          apiready: this.props.onReady,\n          seeked: () => this.props.onSeek(this.player.currentTime),\n          video_end: this.props.onEnded,\n          durationchange: this.onDurationChange,\n          pause: this.props.onPause,\n          playing: this.props.onPlay,\n          waiting: this.props.onBuffer,\n          error: event => onError(event)\n        }\n      })\n    }, onError)\n  }\n\n  onDurationChange = () => {\n    const duration = this.getDuration()\n    this.props.onDuration(duration)\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    // Nothing to do\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  mute = () => {\n    this.callPlayer('setMuted', true)\n  }\n\n  unmute = () => {\n    this.callPlayer('setMuted', false)\n  }\n\n  getDuration () {\n    return this.player.duration || null\n  }\n\n  getCurrentTime () {\n    return this.player.currentTime\n  }\n\n  getSecondsLoaded () {\n    return this.player.bufferedTime\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}