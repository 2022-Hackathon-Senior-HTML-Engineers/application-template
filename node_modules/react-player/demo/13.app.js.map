{"version":3,"sources":["webpack:///./src/players/YouTube.js"],"names":["MATCH_PLAYLIST","MATCH_USER_UPLOADS","MATCH_NOCOOKIE","YouTube","callPlayer","url","Array","listType","playlist","map","getID","join","test","list","match","replace","event","data","props","onPlay","onPause","onBuffer","onBufferEnd","onEnded","onReady","loop","config","playerVars","onUnstarted","window","PlayerState","UNSTARTED","PLAYING","PAUSED","BUFFERING","ENDED","CUED","isPlaylist","start","seekTo","play","container","this","onMount","MATCH_URL_YOUTUBE","isReady","playing","muted","playsinline","controls","onError","embedOptions","id","player","loadPlaylist","parsePlaylist","cueVideoById","videoId","startSeconds","parseStartTime","endSeconds","parseEndTime","end","getSDK","YT","loaded","then","Player","width","height","autoplay","mute","origin","location","events","setLoop","onPlaybackRateChange","onStateChange","host","undefined","console","warn","document","body","contains","amount","pause","fraction","rate","getDuration","style","display","ref","Component","canPlay","youtube"],"mappings":"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","file":"13.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils'\nimport { canPlay, MATCH_URL_YOUTUBE } from '../patterns'\n\nconst SDK_URL = 'https://www.youtube.com/iframe_api'\nconst SDK_GLOBAL = 'YT'\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady'\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/\nconst NOCOOKIE_HOST = 'https://www.youtube-nocookie.com'\n\nexport default class YouTube extends Component {\n  static displayName = 'YouTube'\n  static canPlay = canPlay.youtube\n  callPlayer = callPlayer\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  getID (url) {\n    if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n      return null\n    }\n    return url.match(MATCH_URL_YOUTUBE)[1]\n  }\n\n  load (url, isReady) {\n    const { playing, muted, playsinline, controls, loop, config, onError } = this.props\n    const { playerVars, embedOptions } = config\n    const id = this.getID(url)\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n        this.player.loadPlaylist(this.parsePlaylist(url))\n        return\n      }\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return\n      this.player = new YT.Player(this.container, {\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline ? 1 : 0,\n          ...this.parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: () => {\n            if (loop) {\n              this.player.setLoop(true) // Enable playlist looping\n            }\n            this.props.onReady()\n          },\n          onPlaybackRateChange: event => this.props.onPlaybackRateChange(event.data),\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined,\n        ...embedOptions\n      })\n    }, onError)\n    if (embedOptions.events) {\n      console.warn('Using `embedOptions.events` will likely break things. Use ReactPlayerâ€™s callback props instead, eg onReady, onPlay, onPause')\n    }\n  }\n\n  parsePlaylist = (url) => {\n    if (url instanceof Array) {\n      return {\n        listType: 'playlist',\n        playlist: url.map(this.getID).join(',')\n      }\n    }\n    if (MATCH_PLAYLIST.test(url)) {\n      const [, playlistId] = url.match(MATCH_PLAYLIST)\n      return {\n        listType: 'playlist',\n        list: playlistId.replace(/^UC/, 'UU')\n      }\n    }\n    if (MATCH_USER_UPLOADS.test(url)) {\n      const [, username] = url.match(MATCH_USER_UPLOADS)\n      return {\n        listType: 'user_uploads',\n        list: username\n      }\n    }\n    return {}\n  }\n\n  onStateChange = (event) => {\n    const { data } = event\n    const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop, config: { playerVars, onUnstarted } } = this.props\n    const { UNSTARTED, PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState\n    if (data === UNSTARTED) onUnstarted()\n    if (data === PLAYING) {\n      onPlay()\n      onBufferEnd()\n    }\n    if (data === PAUSED) onPause()\n    if (data === BUFFERING) onBuffer()\n    if (data === ENDED) {\n      const isPlaylist = !!this.callPlayer('getPlaylist')\n      // Only loop manually if not playing a playlist\n      if (loop && !isPlaylist) {\n        if (playerVars.start) {\n          this.seekTo(playerVars.start)\n        } else {\n          this.play()\n        }\n      }\n      onEnded()\n    }\n    if (data === CUED) onReady()\n  }\n\n  play () {\n    this.callPlayer('playVideo')\n  }\n\n  pause () {\n    this.callPlayer('pauseVideo')\n  }\n\n  stop () {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return\n    this.callPlayer('stopVideo')\n  }\n\n  seekTo (amount) {\n    this.callPlayer('seekTo', amount)\n    if (!this.props.playing) {\n      this.pause()\n    }\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n\n  mute = () => {\n    this.callPlayer('mute')\n  }\n\n  unmute = () => {\n    this.callPlayer('unMute')\n  }\n\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackRate', rate)\n  }\n\n  setLoop (loop) {\n    this.callPlayer('setLoop', loop)\n  }\n\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n\n  getSecondsLoaded () {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration()\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}