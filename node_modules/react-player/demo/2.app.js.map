{"version":3,"sources":["webpack:///./src/players/Facebook.js"],"names":["SDK_URL","Facebook","callPlayer","props","config","playerId","randomString","this","onMount","url","isReady","getSDK","then","FB","XFBML","parse","init","appId","xfbml","version","Event","subscribe","msg","onLoaded","type","id","playerID","player","instance","onPlay","onPause","onEnded","onBuffer","onBufferEnd","onError","muted","onReady","document","getElementById","querySelector","style","visibility","seconds","fraction","attributes","width","height","className","data-href","data-autoplay","playing","data-allowfullscreen","data-controls","controls","Component","canPlay","facebook"],"mappings":"2xDAKA,IAAMA,EAAU,4CAKKC,E,uaAINC,K,kBACF,EAAKC,MAAMC,OAAOC,UAAlB,UAPY,oBAOZ,OAAoDC,gB,eAkExD,WACL,EAAKJ,WAAW,W,iBAGT,WACP,EAAKA,WAAW,a,2DApEhBK,KAAKJ,MAAMK,SAAWD,KAAKJ,MAAMK,QAAQD,Q,2BAGrCE,EAAKC,GAAS,WACdA,EACFC,YAAOX,EAjBM,KACM,eAgB2BY,MAAK,SAAAC,GAAE,OAAIA,EAAGC,MAAMC,WAGpEJ,YAAOX,EApBQ,KACM,eAmByBY,MAAK,SAAAC,GACjDA,EAAGG,KAAK,CACNC,MAAO,EAAKd,MAAMC,OAAOa,MACzBC,OAAO,EACPC,QAAS,EAAKhB,MAAMC,OAAOe,UAE7BN,EAAGO,MAAMC,UAAU,gBAAgB,SAAAC,GAGjC,EAAKnB,MAAMoB,cAEbV,EAAGO,MAAMC,UAAU,eAAe,SAAAC,GACf,UAAbA,EAAIE,MAAoBF,EAAIG,KAAO,EAAKC,WAC1C,EAAKC,OAASL,EAAIM,SAClB,EAAKD,OAAON,UAAU,iBAAkB,EAAKlB,MAAM0B,QACnD,EAAKF,OAAON,UAAU,SAAU,EAAKlB,MAAM2B,SAC3C,EAAKH,OAAON,UAAU,kBAAmB,EAAKlB,MAAM4B,SACpD,EAAKJ,OAAON,UAAU,mBAAoB,EAAKlB,MAAM6B,UACrD,EAAKL,OAAON,UAAU,oBAAqB,EAAKlB,MAAM8B,aACtD,EAAKN,OAAON,UAAU,QAAS,EAAKlB,MAAM+B,SACtC,EAAK/B,MAAMgC,MACb,EAAKjC,WAAW,QAEhB,EAAKA,WAAW,UAElB,EAAKC,MAAMiC,UAIXC,SAASC,eAAe,EAAKZ,UAAUa,cAAc,UAAUC,MAAMC,WAAa,mB,6BAOxFlC,KAAKL,WAAW,U,8BAIhBK,KAAKL,WAAW,W,6DAOVwC,GACNnC,KAAKL,WAAW,OAAQwC,K,gCAGfC,GACTpC,KAAKL,WAAW,YAAayC,K,oCAY7B,OAAOpC,KAAKL,WAAW,iB,uCAIvB,OAAOK,KAAKL,WAAW,wB,yCAIvB,OAAO,O,+BAGC,IACA0C,EAAerC,KAAKJ,MAAMC,OAA1BwC,WAKR,OACE,2BACEJ,MANU,CACZK,MAAO,OACPC,OAAQ,QAKNrB,GAAIlB,KAAKmB,SACTqB,UAAU,WACVC,YAAWzC,KAAKJ,MAAMM,IACtBwC,gBAAe1C,KAAKJ,MAAM+C,QAAU,OAAS,QAC7CC,uBAAqB,OACrBC,gBAAe7C,KAAKJ,MAAMkD,SAAW,OAAS,SAC1CT,S,8BA1G0BU,a,EAAjBrD,E,cACE,Y,EADFA,E,UAEFsD,IAAQC,U,EAFNvD,E,eAGE","file":"2.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, randomString } from '../utils'\nimport { canPlay } from '../patterns'\n\nconst SDK_URL = 'https://connect.facebook.net/en_US/sdk.js'\nconst SDK_GLOBAL = 'FB'\nconst SDK_GLOBAL_READY = 'fbAsyncInit'\nconst PLAYER_ID_PREFIX = 'facebook-player-'\n\nexport default class Facebook extends Component {\n  static displayName = 'Facebook'\n  static canPlay = canPlay.facebook\n  static loopOnEnded = true\n  callPlayer = callPlayer\n  playerID = this.props.config.playerId || `${PLAYER_ID_PREFIX}${randomString()}`\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url, isReady) {\n    if (isReady) {\n      getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(FB => FB.XFBML.parse())\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(FB => {\n      FB.init({\n        appId: this.props.config.appId,\n        xfbml: true,\n        version: this.props.config.version\n      })\n      FB.Event.subscribe('xfbml.render', msg => {\n        // Here we know the SDK has loaded, even if onReady/onPlay\n        // is not called due to a video that cannot be embedded\n        this.props.onLoaded()\n      })\n      FB.Event.subscribe('xfbml.ready', msg => {\n        if (msg.type === 'video' && msg.id === this.playerID) {\n          this.player = msg.instance\n          this.player.subscribe('startedPlaying', this.props.onPlay)\n          this.player.subscribe('paused', this.props.onPause)\n          this.player.subscribe('finishedPlaying', this.props.onEnded)\n          this.player.subscribe('startedBuffering', this.props.onBuffer)\n          this.player.subscribe('finishedBuffering', this.props.onBufferEnd)\n          this.player.subscribe('error', this.props.onError)\n          if (this.props.muted) {\n            this.callPlayer('mute')\n          } else {\n            this.callPlayer('unmute')\n          }\n          this.props.onReady()\n\n          // For some reason Facebook have added `visibility: hidden`\n          // to the iframe when autoplay fails, so here we set it back\n          document.getElementById(this.playerID).querySelector('iframe').style.visibility = 'visible'\n        }\n      })\n    })\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    // Nothing to do\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  mute = () => {\n    this.callPlayer('mute')\n  }\n\n  unmute = () => {\n    this.callPlayer('unmute')\n  }\n\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('getCurrentPosition')\n  }\n\n  getSecondsLoaded () {\n    return null\n  }\n\n  render () {\n    const { attributes } = this.props.config\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    return (\n      <div\n        style={style}\n        id={this.playerID}\n        className='fb-video'\n        data-href={this.props.url}\n        data-autoplay={this.props.playing ? 'true' : 'false'}\n        data-allowfullscreen='true'\n        data-controls={this.props.controls ? 'true' : 'false'}\n        {...attributes}\n      />\n    )\n  }\n}\n"],"sourceRoot":""}