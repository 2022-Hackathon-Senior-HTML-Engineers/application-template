{"version":3,"sources":["webpack:///./src/players/FilePlayer.js"],"names":["HAS_NAVIGATOR","navigator","IS_IPAD_PRO","platform","maxTouchPoints","IS_IOS","test","userAgent","window","MSStream","MATCH_DROPBOX_URL","MATCH_CLOUDFLARE_STREAM","FilePlayer","props","onReady","onPlay","onBuffer","onBufferEnd","onPause","onEnded","onError","event","onPlaybackRateChange","target","playbackRate","onEnablePIP","e","onDisablePIP","playing","play","player","supportsWebKitPresentationMode","webkitPresentationMode","onSeek","currentTime","muted","source","index","key","src","track","prevPlayer","this","onMount","addListeners","load","prevProps","shouldUseAudio","removeListeners","url","isMediaStream","srcObject","hls","destroy","playsinline","addEventListener","onPlayBackRateChange","onPresentationModeChange","shouldUseHLS","setAttribute","removeEventListener","config","forceVideo","attributes","poster","AUDIO_EXTENSIONS","forceAudio","forceHLS","HLS_EXTENSIONS","DASH_EXTENSIONS","forceDASH","FLV_EXTENSIONS","forceFLV","hlsVersion","hlsOptions","dashVersion","flvVersion","dash","reset","getSDK","replace","then","Hls","on","Events","MANIFEST_PARSED","ERROR","data","id","match","loadSource","attachMedia","onLoaded","shouldUseDASH","dashjs","MediaPlayer","create","initialize","parseInt","getDebug","setLogToBrowserConsole","updateSettings","debug","logLevel","Debug","LOG_LEVEL_NONE","shouldUseFLV","flvjs","flv","createPlayer","type","attachMediaElement","Array","URL","createObjectURL","promise","pause","removeAttribute","seconds","fraction","volume","requestPictureInPicture","document","pictureInPictureElement","webkitSetPresentationMode","exitPictureInPicture","rate","error","duration","seekable","Infinity","length","end","buffered","getDuration","useHLS","useDASH","useFLV","loop","controls","width","height","Element","style","ref","getSource","preload","autoPlay","undefined","map","renderSourceElement","tracks","renderTrack","Component","canPlay","file"],"mappings":"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","file":"3.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { getSDK, isMediaStream, supportsWebKitPresentationMode } from '../utils'\nimport { canPlay, AUDIO_EXTENSIONS, HLS_EXTENSIONS, DASH_EXTENSIONS, FLV_EXTENSIONS } from '../patterns'\n\nconst HAS_NAVIGATOR = typeof navigator !== 'undefined'\nconst IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1\nconst IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream\nconst HLS_SDK_URL = 'https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js'\nconst HLS_GLOBAL = 'Hls'\nconst DASH_SDK_URL = 'https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js'\nconst DASH_GLOBAL = 'dashjs'\nconst FLV_SDK_URL = 'https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js'\nconst FLV_GLOBAL = 'flvjs'\nconst MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/\nconst MATCH_CLOUDFLARE_STREAM = /https:\\/\\/watch\\.cloudflarestream\\.com\\/([a-z0-9]+)/\nconst REPLACE_CLOUDFLARE_STREAM = 'https://videodelivery.net/{id}/manifest/video.m3u8'\n\nexport default class FilePlayer extends Component {\n  static displayName = 'FilePlayer'\n  static canPlay = canPlay.file\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n    this.addListeners(this.player)\n    if (IS_IOS) {\n      this.player.load()\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n      this.removeListeners(this.prevPlayer, prevProps.url)\n      this.addListeners(this.player)\n    }\n\n    if (\n      this.props.url !== prevProps.url &&\n      !isMediaStream(this.props.url)\n    ) {\n      this.player.srcObject = null\n    }\n  }\n\n  componentWillUnmount () {\n    this.removeListeners(this.player)\n    if (this.hls) {\n      this.hls.destroy()\n    }\n  }\n\n  addListeners (player) {\n    const { url, playsinline } = this.props\n    player.addEventListener('play', this.onPlay)\n    player.addEventListener('waiting', this.onBuffer)\n    player.addEventListener('playing', this.onBufferEnd)\n    player.addEventListener('pause', this.onPause)\n    player.addEventListener('seeked', this.onSeek)\n    player.addEventListener('ended', this.onEnded)\n    player.addEventListener('error', this.onError)\n    player.addEventListener('ratechange', this.onPlayBackRateChange)\n    player.addEventListener('enterpictureinpicture', this.onEnablePIP)\n    player.addEventListener('leavepictureinpicture', this.onDisablePIP)\n    player.addEventListener('webkitpresentationmodechanged', this.onPresentationModeChange)\n    if (!this.shouldUseHLS(url)) { // onReady is handled by hls.js\n      player.addEventListener('canplay', this.onReady)\n    }\n    if (playsinline) {\n      player.setAttribute('playsinline', '')\n      player.setAttribute('webkit-playsinline', '')\n      player.setAttribute('x5-playsinline', '')\n    }\n  }\n\n  removeListeners (player, url) {\n    player.removeEventListener('canplay', this.onReady)\n    player.removeEventListener('play', this.onPlay)\n    player.removeEventListener('waiting', this.onBuffer)\n    player.removeEventListener('playing', this.onBufferEnd)\n    player.removeEventListener('pause', this.onPause)\n    player.removeEventListener('seeked', this.onSeek)\n    player.removeEventListener('ended', this.onEnded)\n    player.removeEventListener('error', this.onError)\n    player.removeEventListener('ratechange', this.onPlayBackRateChange)\n    player.removeEventListener('enterpictureinpicture', this.onEnablePIP)\n    player.removeEventListener('leavepictureinpicture', this.onDisablePIP)\n    player.removeEventListener('webkitpresentationmodechanged', this.onPresentationModeChange)\n    if (!this.shouldUseHLS(url)) { // onReady is handled by hls.js\n      player.removeEventListener('canplay', this.onReady)\n    }\n  }\n\n  // Proxy methods to prevent listener leaks\n  onReady = (...args) => this.props.onReady(...args)\n  onPlay = (...args) => this.props.onPlay(...args)\n  onBuffer = (...args) => this.props.onBuffer(...args)\n  onBufferEnd = (...args) => this.props.onBufferEnd(...args)\n  onPause = (...args) => this.props.onPause(...args)\n  onEnded = (...args) => this.props.onEnded(...args)\n  onError = (...args) => this.props.onError(...args)\n  onPlayBackRateChange = (event) => this.props.onPlaybackRateChange(event.target.playbackRate)\n  onEnablePIP = (...args) => this.props.onEnablePIP(...args)\n\n  onDisablePIP = e => {\n    const { onDisablePIP, playing } = this.props\n    onDisablePIP(e)\n    if (playing) {\n      this.play()\n    }\n  }\n\n  onPresentationModeChange = e => {\n    if (this.player && supportsWebKitPresentationMode(this.player)) {\n      const { webkitPresentationMode } = this.player\n      if (webkitPresentationMode === 'picture-in-picture') {\n        this.onEnablePIP(e)\n      } else if (webkitPresentationMode === 'inline') {\n        this.onDisablePIP(e)\n      }\n    }\n  }\n\n  onSeek = e => {\n    this.props.onSeek(e.target.currentTime)\n  }\n\n  shouldUseAudio (props) {\n    if (props.config.forceVideo) {\n      return false\n    }\n    if (props.config.attributes.poster) {\n      return false // Use <video> so that poster is shown\n    }\n    return AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio\n  }\n\n  shouldUseHLS (url) {\n    if (this.props.config.forceHLS) {\n      return true\n    }\n    if (IS_IOS) {\n      return false\n    }\n    return HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url)\n  }\n\n  shouldUseDASH (url) {\n    return DASH_EXTENSIONS.test(url) || this.props.config.forceDASH\n  }\n\n  shouldUseFLV (url) {\n    return FLV_EXTENSIONS.test(url) || this.props.config.forceFLV\n  }\n\n  load (url) {\n    const { hlsVersion, hlsOptions, dashVersion, flvVersion } = this.props.config\n    if (this.hls) {\n      this.hls.destroy()\n    }\n    if (this.dash) {\n      this.dash.reset()\n    }\n    if (this.shouldUseHLS(url)) {\n      getSDK(HLS_SDK_URL.replace('VERSION', hlsVersion), HLS_GLOBAL).then(Hls => {\n        this.hls = new Hls(hlsOptions)\n        this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n          this.props.onReady()\n        })\n        this.hls.on(Hls.Events.ERROR, (e, data) => {\n          this.props.onError(e, data, this.hls, Hls)\n        })\n        if (MATCH_CLOUDFLARE_STREAM.test(url)) {\n          const id = url.match(MATCH_CLOUDFLARE_STREAM)[1]\n          this.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace('{id}', id))\n        } else {\n          this.hls.loadSource(url)\n        }\n        this.hls.attachMedia(this.player)\n        this.props.onLoaded()\n      })\n    }\n    if (this.shouldUseDASH(url)) {\n      getSDK(DASH_SDK_URL.replace('VERSION', dashVersion), DASH_GLOBAL).then(dashjs => {\n        this.dash = dashjs.MediaPlayer().create()\n        this.dash.initialize(this.player, url, this.props.playing)\n        this.dash.on('error', this.props.onError)\n        if (parseInt(dashVersion) < 3) {\n          this.dash.getDebug().setLogToBrowserConsole(false)\n        } else {\n          this.dash.updateSettings({ debug: { logLevel: dashjs.Debug.LOG_LEVEL_NONE } })\n        }\n        this.props.onLoaded()\n      })\n    }\n    if (this.shouldUseFLV(url)) {\n      getSDK(FLV_SDK_URL.replace('VERSION', flvVersion), FLV_GLOBAL).then(flvjs => {\n        this.flv = flvjs.createPlayer({ type: 'flv', url })\n        this.flv.attachMediaElement(this.player)\n        this.flv.load()\n        this.props.onLoaded()\n      })\n    }\n\n    if (url instanceof Array) {\n      // When setting new urls (<source>) on an already loaded video,\n      // HTMLMediaElement.load() is needed to reset the media element\n      // and restart the media resource. Just replacing children source\n      // dom nodes is not enough\n      this.player.load()\n    } else if (isMediaStream(url)) {\n      try {\n        this.player.srcObject = url\n      } catch (e) {\n        this.player.src = window.URL.createObjectURL(url)\n      }\n    }\n  }\n\n  play () {\n    const promise = this.player.play()\n    if (promise) {\n      promise.catch(this.props.onError)\n    }\n  }\n\n  pause () {\n    this.player.pause()\n  }\n\n  stop () {\n    this.player.removeAttribute('src')\n    if (this.dash) {\n      this.dash.reset()\n    }\n  }\n\n  seekTo (seconds) {\n    this.player.currentTime = seconds\n  }\n\n  setVolume (fraction) {\n    this.player.volume = fraction\n  }\n\n  mute = () => {\n    this.player.muted = true\n  }\n\n  unmute = () => {\n    this.player.muted = false\n  }\n\n  enablePIP () {\n    if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n      this.player.requestPictureInPicture()\n    } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== 'picture-in-picture') {\n      this.player.webkitSetPresentationMode('picture-in-picture')\n    }\n  }\n\n  disablePIP () {\n    if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n      document.exitPictureInPicture()\n    } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== 'inline') {\n      this.player.webkitSetPresentationMode('inline')\n    }\n  }\n\n  setPlaybackRate (rate) {\n    try {\n      this.player.playbackRate = rate\n    } catch (error) {\n      this.props.onError(error)\n    }\n  }\n\n  getDuration () {\n    if (!this.player) return null\n    const { duration, seekable } = this.player\n    // on iOS, live streams return Infinity for the duration\n    // so instead we use the end of the seekable timerange\n    if (duration === Infinity && seekable.length > 0) {\n      return seekable.end(seekable.length - 1)\n    }\n    return duration\n  }\n\n  getCurrentTime () {\n    if (!this.player) return null\n    return this.player.currentTime\n  }\n\n  getSecondsLoaded () {\n    if (!this.player) return null\n    const { buffered } = this.player\n    if (buffered.length === 0) {\n      return 0\n    }\n    const end = buffered.end(buffered.length - 1)\n    const duration = this.getDuration()\n    if (end > duration) {\n      return duration\n    }\n    return end\n  }\n\n  getSource (url) {\n    const useHLS = this.shouldUseHLS(url)\n    const useDASH = this.shouldUseDASH(url)\n    const useFLV = this.shouldUseFLV(url)\n    if (url instanceof Array || isMediaStream(url) || useHLS || useDASH || useFLV) {\n      return undefined\n    }\n    if (MATCH_DROPBOX_URL.test(url)) {\n      return url.replace('www.dropbox.com', 'dl.dropboxusercontent.com')\n    }\n    return url\n  }\n\n  renderSourceElement = (source, index) => {\n    if (typeof source === 'string') {\n      return <source key={index} src={source} />\n    }\n    return <source key={index} {...source} />\n  }\n\n  renderTrack = (track, index) => {\n    return <track key={index} {...track} />\n  }\n\n  ref = player => {\n    if (this.player) {\n      // Store previous player to be used by removeListeners()\n      this.prevPlayer = this.player\n    }\n    this.player = player\n  }\n\n  render () {\n    const { url, playing, loop, controls, muted, config, width, height } = this.props\n    const useAudio = this.shouldUseAudio(this.props)\n    const Element = useAudio ? 'audio' : 'video'\n    const style = {\n      width: width === 'auto' ? width : '100%',\n      height: height === 'auto' ? height : '100%'\n    }\n    return (\n      <Element\n        ref={this.ref}\n        src={this.getSource(url)}\n        style={style}\n        preload='auto'\n        autoPlay={playing || undefined}\n        controls={controls}\n        muted={muted}\n        loop={loop}\n        {...config.attributes}\n      >\n        {url instanceof Array &&\n          url.map(this.renderSourceElement)}\n        {config.tracks.map(this.renderTrack)}\n      </Element>\n    )\n  }\n}\n"],"sourceRoot":""}