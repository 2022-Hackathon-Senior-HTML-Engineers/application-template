{"version":3,"sources":["webpack:///./src/players/SoundCloud.js"],"names":["SoundCloud","callPlayer","setVolume","props","volume","iframe","this","onMount","url","isReady","getSDK","then","SC","Widget","Events","PLAY","PLAY_PROGRESS","PAUSE","FINISH","ERROR","player","bind","onPlay","duration","currentTime","onPause","e","currentPosition","fractionLoaded","loadedProgress","onEnded","onError","load","config","options","callback","getDuration","onReady","seconds","fraction","style","width","height","display","ref","src","encodeURIComponent","frameBorder","allow","Component","canPlay","soundcloud"],"mappings":"2oEAKA,IAGqBA,E,uaAINC,K,kBACF,M,qBACG,M,wBACG,M,eA4DV,WACL,EAAKC,UAAU,M,iBAGR,WACmB,OAAtB,EAAKC,MAAMC,QACb,EAAKF,UAAU,EAAKC,MAAMC,W,cAgBxB,SAAAC,GACJ,EAAKA,OAASA,K,2DAhFdC,KAAKH,MAAMI,SAAWD,KAAKH,MAAMI,QAAQD,Q,2BAGrCE,EAAKC,GAAS,WAClBC,YAjBY,yCACG,MAgBaC,MAAK,SAAAC,GAC/B,GAAK,EAAKP,OAAV,CADqC,MAEiBO,EAAGC,OAAOC,OAAxDC,EAF6B,EAE7BA,KAAMC,EAFuB,EAEvBA,cAAeC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,OAAQC,EAFP,EAEOA,MACvCV,IACH,EAAKW,OAASR,EAAGC,OAAO,EAAKR,QAC7B,EAAKe,OAAOC,KAAKN,EAAM,EAAKZ,MAAMmB,QAClC,EAAKF,OAAOC,KAAKJ,GAAO,WACJ,EAAKM,SAAW,EAAKC,YACvB,KAIhB,EAAKrB,MAAMsB,aAEb,EAAKL,OAAOC,KAAKL,GAAe,SAAAU,GAC9B,EAAKF,YAAcE,EAAEC,gBAAkB,IACvC,EAAKC,eAAiBF,EAAEG,kBAE1B,EAAKT,OAAOC,KAAKH,GAAQ,kBAAM,EAAKf,MAAM2B,aAC1C,EAAKV,OAAOC,KAAKF,GAAO,SAAAO,GAAC,OAAI,EAAKvB,MAAM4B,QAAQL,OAElD,EAAKN,OAAOY,KAAKxB,EAAjB,OACK,EAAKL,MAAM8B,OAAOC,SADvB,IAEEC,SAAU,WACR,EAAKf,OAAOgB,aAAY,SAAAb,GACtB,EAAKA,SAAWA,EAAW,IAC3B,EAAKpB,MAAMkC,uB,6BAQnB/B,KAAKL,WAAW,U,8BAIhBK,KAAKL,WAAW,W,6DAOVqC,GACNhC,KAAKL,WAAW,SAAoB,IAAVqC,K,gCAGjBC,GACTjC,KAAKL,WAAW,YAAwB,IAAXsC,K,oCAc7B,OAAOjC,KAAKiB,W,uCAIZ,OAAOjB,KAAKkB,c,yCAIZ,OAAOlB,KAAKsB,eAAiBtB,KAAKiB,W,+BAO1B,IAEFiB,EAAQ,CACZC,MAAO,OACPC,OAAQ,OACRC,QAJkBrC,KAAKH,MAAjBwC,SAMR,OACE,4BACEC,IAAKtC,KAAKsC,IACVC,IAAG,+CAA0CC,mBAAmBxC,KAAKH,MAAMK,MAC3EgC,MAAOA,EACPO,YAAa,EACbC,MAAM,kB,8BA1G0BC,a,EAAnBjD,E,cACE,c,EADFA,E,UAEFkD,IAAQC,Y,EAFNnD,E,eAGE","file":"7.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK } from '../utils'\nimport { canPlay } from '../patterns'\n\nconst SDK_URL = 'https://w.soundcloud.com/player/api.js'\nconst SDK_GLOBAL = 'SC'\n\nexport default class SoundCloud extends Component {\n  static displayName = 'SoundCloud'\n  static canPlay = canPlay.soundcloud\n  static loopOnEnded = true\n  callPlayer = callPlayer\n  duration = null\n  currentTime = null\n  fractionLoaded = null\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url, isReady) {\n    getSDK(SDK_URL, SDK_GLOBAL).then(SC => {\n      if (!this.iframe) return\n      const { PLAY, PLAY_PROGRESS, PAUSE, FINISH, ERROR } = SC.Widget.Events\n      if (!isReady) {\n        this.player = SC.Widget(this.iframe)\n        this.player.bind(PLAY, this.props.onPlay)\n        this.player.bind(PAUSE, () => {\n          const remaining = this.duration - this.currentTime\n          if (remaining < 0.05) {\n            // Prevent onPause firing right before onEnded\n            return\n          }\n          this.props.onPause()\n        })\n        this.player.bind(PLAY_PROGRESS, e => {\n          this.currentTime = e.currentPosition / 1000\n          this.fractionLoaded = e.loadedProgress\n        })\n        this.player.bind(FINISH, () => this.props.onEnded())\n        this.player.bind(ERROR, e => this.props.onError(e))\n      }\n      this.player.load(url, {\n        ...this.props.config.options,\n        callback: () => {\n          this.player.getDuration(duration => {\n            this.duration = duration / 1000\n            this.props.onReady()\n          })\n        }\n      })\n    })\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    // Nothing to do\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seekTo', seconds * 1000)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n\n  mute = () => {\n    this.setVolume(0)\n  }\n\n  unmute = () => {\n    if (this.props.volume !== null) {\n      this.setVolume(this.props.volume)\n    }\n  }\n\n  getDuration () {\n    return this.duration\n  }\n\n  getCurrentTime () {\n    return this.currentTime\n  }\n\n  getSecondsLoaded () {\n    return this.fractionLoaded * this.duration\n  }\n\n  ref = iframe => {\n    this.iframe = iframe\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <iframe\n        ref={this.ref}\n        src={`https://w.soundcloud.com/player/?url=${encodeURIComponent(this.props.url)}`}\n        style={style}\n        frameBorder={0}\n        allow='autoplay'\n      />\n    )\n  }\n}\n"],"sourceRoot":""}